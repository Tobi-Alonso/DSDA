--includes
	library ieee;
	use ieee.std_logic_1164.all;
	use ieee.numeric_std.ALL;

entity tb_sintetizadorFrec is
end tb_sintetizadorFrec;

architecture arc_tb_sintetizadorFrec of tb_SintetizadorFrec is

	--Declaracion de constantes de division de frecuencia
		Constant SEMI_T_01: 	time:= 5 sec;
		Constant SEMI_T_05: 	time:= 1 sec;
		Constant SEMI_T_1: 		time:= 500 ms;
		Constant SEMI_T_2:		time:= 250 ms;
		Constant SEMI_T_5: 		time:= 100 ms;
		Constant SEMI_T_50MHZ:	time:= 10 ns;

	--estimulos
		signal	clock_50: 	 std_logic:=0;	--iniciacion de clock en 0
		signal	clock_sel:	 std_logic_vector(2 downto 0):="111"; --inicializacion con clock out deshablititado
		signal	clock_out:	 std_logic;
		signal	siete_seg1:	 std_logic_vector(6 downto 0);
		signal	siete_seg0:	 std_logic_vector(6 downto 0);

	--declaracion de DUT
		component SintetizadorFrec is
			port(	clock_50: 	in std_logic;
					clock_sel:	in std_logic_vector(2 downto 0);
					clock_out:	out std_logic;
					siete_seg1:	out std_logic_vector(6 downto 0);
					siete_seg0:	out std_logic_vector(6 downto 0)
			);
		end component SintetizadorFrec;

	--parametros de test
		constant VUELTAS: integer:=2;--numero de periodos en que testeamos el sistema


	begin
		--instanciacion de DUT
			DUT: SintetizadorFrec port map(clock_50,clock_sel,clock_out,siete_seg1,siete_seg0);

		--generacion del relog
			clock_50= not (clock_50) after SEMI_T_50MHZ;

		estimulos : process

			variable taux: time;


			begin

			agragar test de digitos.....

				--test de clock de 0.1Hz 
					clock_sel<= "000";
					wait until clock_out'event;
					test_clk_01 : for i in 0 to (VUELTAS*2-1) loop
							taux=now;
							wait until clock_out'event; --verificar si esta tomando valores logicos??
							assert (SEMI_T_01/=now-taux)
								report "frecuencia erronea, semiperiodo de 0.1Hz: "& time'image(now-taux)
								severity ERROR;
						
					end loop ; -- test_clk_01

				--test de clock de 0.5Hz 
					clock_sel<= "001";
					wait until clock_out'event;
					test_clk_05 : for i in 0 to (VUELTAS*2-1) loop
							taux=now;
							wait until clock_out'event; --verificar si esta tomando valores logicos??
							assert (SEMI_T_05/=now-taux)
								report "frecuencia erronea, semiperiodo de 0.5Hz: "& time'image(now-taux)
								severity ERROR;
						
					end loop ; -- test_clk_05

				--test de clock de 1Hz 
					clock_sel<= "010";
					wait until clock_out'event;
					test_clk_1 : for i in 0 to (VUELTAS*2-1) loop
							taux=now;
							wait until clock_out'event; --verificar si esta tomando valores logicos??
							assert (SEMI_T_1/=now-taux)
								report "frecuencia erronea, semiperiodo de 1Hz: "& time'image(now-taux)
								severity ERROR;
						
					end loop ; -- test_clk_1

				--test de clock de 2Hz 
					clock_sel<= "011";
					wait until clock_out'event;
					test_clk_2 : for i in 0 to (VUELTAS*2-1) loop
							taux=now;
							wait until clock_out'event; --verificar si esta tomando valores logicos??
							assert (SEMI_T_2/=now-taux)
								report "frecuencia erronea, semiperiodo de 2Hz: "& time'image(now-taux)
								severity ERROR;
						
					end loop ; -- test_clk_2

				--test de clock de 5Hz 
					clock_sel<= "100";
					wait until clock_out'event;
					test_clk_5 : for i in 0 to (VUELTAS*2-1) loop
							taux=now;
							wait until clock_out'event; --verificar si esta tomando valores logicos??
							assert (SEMI_T_5/=now-taux)
								report "frecuencia erronea, semiperiodo de 5Hz: "& time'image(now-taux)
								severity ERROR;
						
					end loop ; -- test_clk_5


				--test ante cambios rapidos del selector de clocks

					clock_sel<="111"; --clock_out a 1 y contador a 0
					wait for 2*SEMI_T_50MHZ;
					clock_sel<="011" --seleccion de clock de 2 Hz 
					wait for SEMI_T_5; -- contador comienza contar y clk sigue en 1
					wait for 2*SEMI_T_50MHZ;
					clock_sel<="100"; --seleccion de clock de 5Hz antes de semiperido de clock de 2Hz
					wait until rising_edge(clock_50);
						assert(clock_out=0)
							report"no ca


	




				

			wait;

		end process ; -- estimulos


end architecture ; -- arc_tb_sintetizadorFrec